-- 99 Nights in the Forest - Complete Working Script with Movable Menus
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Variables
local player = Players.LocalPlayer
local flyEnabled = false
local speedEnabled = false
local playerSpeed = 16
local flySpeed = 50

-- Fly System Variables
local flyConnection
local bodyVelocity
local bodyGyro
local mobileControls
local mobileFlyConnection

-- Mobile control variables
local upPressed = false
local downPressed = false
local forwardPressed = false
local backwardPressed = false
local leftPressed = false
local rightPressed = false

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "99 Nights Tools",
    LoadingTitle = "Loading Interface...",
    LoadingSubtitle = "Complete & Working",
    ConfigurationSaving = { Enabled = false }
})

-- Main Tab
local MainTab = Window:CreateTab("Main", nil)

-- Player Modifications Section
MainTab:CreateSection("Player Modifications")

local FlyToggle = MainTab:CreateToggle({
    Name = "üöÄ Flight Mode",
    CurrentValue = false,
    Callback = function(Value)
        flyEnabled = Value
        if flyEnabled then
            activateFly()
            if UserInputService.TouchEnabled then
                createMobileControls()
            end
            Rayfield:Notify({
                Title = "Flight Enabled",
                Content = UserInputService.TouchEnabled and "Use mobile controls to fly" or "Use WASD + Space/Shift to fly",
                Duration = 4
            })
        else
            deactivateFly()
            if UserInputService.TouchEnabled then
                removeMobileControls()
            end
        end
    end
})

local SpeedToggle = MainTab:CreateToggle({
    Name = "‚ö° Speed Boost",
    CurrentValue = false,
    Callback = function(Value)
        speedEnabled = Value
        if speedEnabled then
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.WalkSpeed = playerSpeed
            end
        else
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.WalkSpeed = 16
            end
        end
    end
})

local SpeedSlider = MainTab:CreateSlider({
    Name = "üéØ Speed Value",
    Range = {16, 100},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = 50,
    Callback = function(Value)
        playerSpeed = Value
        if speedEnabled and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = playerSpeed
        end
    end
})

local FlySpeedSlider = MainTab:CreateSlider({
    Name = "‚úàÔ∏è Fly Speed",
    Range = {25, 150},
    Increment = 5,
    Suffix = "studs",
    CurrentValue = 50,
    Callback = function(Value)
        flySpeed = Value
    end
})

-- Visuals Section
MainTab:CreateSection("Visuals")

local FullbrightToggle = MainTab:CreateToggle({
    Name = "üí° Fullbright",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            Lighting.GlobalShadows = false
            Lighting.Brightness = 2
            Lighting.Ambient = Color3.new(1, 1, 1)
        else
            Lighting.GlobalShadows = true
            Lighting.Brightness = 1
            Lighting.Ambient = Color3.new(0.5, 0.5, 0.5)
        end
    end
})

local XRayToggle = MainTab:CreateToggle({
    Name = "üîç X-Ray Vision",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            for _, part in pairs(Workspace:GetDescendants()) do
                if part:IsA("BasePart") and part.Transparency < 1 then
                    part.LocalTransparencyModifier = 0.7
                end
            end
        else
            for _, part in pairs(Workspace:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.LocalTransparencyModifier = 0
                end
            end
        end
    end
})

-- Teleport Tab
local TeleportTab = Window:CreateTab("Teleport", nil)

TeleportTab:CreateSection("Locations")

local TeleportBaseButton = TeleportTab:CreateButton({
    Name = "üè† Spawn Base",
    Callback = function()
        teleportToSpawn()
    end
})

local TeleportVolcanoButton = TeleportTab:CreateButton({
    Name = "üåã Volcano",
    Callback = function()
        teleportToVolcano()
    end
})

-- Items Tab
local ItemsTab = Window:CreateTab("Items", nil)

ItemsTab:CreateSection("Item Collection")

local BringLogsButton = ItemsTab:CreateButton({
    Name = "ü™µ Bring Logs",
    Callback = function()
        bringLogsOnly()
    end
})

local BringFuelButton = ItemsTab:CreateButton({
    Name = "‚õΩ Bring Fuel",
    Callback = function()
        bringFuel()
    end
})

local BringFoodButton = ItemsTab:CreateButton({
    Name = "üçé Bring Food",
    Callback = function()
        bringFood()
    end
})

local BringMedsButton = ItemsTab:CreateButton({
    Name = "ü©π Bring Meds",
    Callback = function()
        bringMeds()
    end
})

local BringScrapButton = ItemsTab:CreateButton({
    Name = "üîß Bring Scrap",
    Callback = function()
        bringScrap()
    end
})

-- Status
ItemsTab:CreateSection("Status")
local StatusLabel = ItemsTab:CreateLabel("Ready")

-- Kids Tab
local KidsTab = Window:CreateTab("Kids", nil)

KidsTab:CreateSection("Kids Scripts")

-- Function to create movable GUI
local function createMovableGUI(title, buttons, buttonWidth, buttonHeight)
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- Create main GUI
    local gui = Instance.new("ScreenGui")
    gui.Name = "MovableGUI"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, buttonWidth + 20, 0, #buttons * (buttonHeight + 10) + 50)
    mainFrame.Position = UDim2.new(0, 50, 0, 50)
    mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = gui
    
    -- Rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame
    
    -- Shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Parent = mainFrame
    shadow.ZIndex = -1
    
    -- Title bar (for dragging)
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 35)
    titleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    local titleText = Instance.new("TextLabel")
    titleText.Size = UDim2.new(1, -40, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = title
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextSize = 14
    titleText.Font = Enum.Font.GothamBold
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 25, 0, 25)
    closeButton.Position = UDim2.new(1, -30, 0, 5)
    closeButton.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
    closeButton.Text = "√ó"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 18
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeButton
    
    -- Content frame
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -10, 1, -45)
    contentFrame.Position = UDim2.new(0, 5, 0, 40)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    
    -- Create buttons
    for i, buttonData in ipairs(buttons) do
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 0, buttonHeight)
        button.Position = UDim2.new(0, 0, 0, (i-1) * (buttonHeight + 5))
        button.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        button.Text = buttonData.text
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 12
        button.Font = Enum.Font.Gotham
        button.Parent = contentFrame
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 8)
        buttonCorner.Parent = button
        
        -- Hover effects
        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(80, 80, 100)}):Play()
        end)
        
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 80)}):Play()
        end)
        
        button.MouseButton1Click:Connect(buttonData.callback)
    end
    
    -- Dragging functionality
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)
    
    -- Touch support for close button
    closeButton.TouchTap:Connect(function()
        gui:Destroy()
    end)
    
    gui.Parent = playerGui
    return gui
end

-- Teleport to Kids Button
local TeleportToKidsButton = KidsTab:CreateButton({
    Name = "üöÄ Teleport to Kids",
    Callback = function()
        Rayfield:Notify({
            Title = "Loading Teleport Menu",
            Content = "Opening movable teleport menu...",
            Duration = 3
        })
        
        -- Create movable teleport menu
        local teleportButtons = {
            {
                text = "Teleport to Lost Child",
                callback = function()
                    teleportToKid("Lost Child")
                end
            },
            {
                text = "Teleport to Lost Child 2", 
                callback = function()
                    teleportToKid("Lost Child2")
                end
            },
            {
                text = "Teleport to Lost Child 3",
                callback = function()
                    teleportToKid("Lost Child3")
                end
            },
            {
                text = "Teleport to Lost Child 4",
                callback = function()
                    teleportToKid("Lost Child4")
                end
            },
            {
                text = "Teleport to Random Kid",
                callback = function()
                    teleportToRandomKid()
                end
            }
        }
        
        createMovableGUI("TELEPORT TO KIDS", teleportButtons, 200, 35)
    end
})

-- Bring Kids to You Button
local BringKidsButton = KidsTab:CreateButton({
    Name = "üë∂ Bring Kids to You",
    Callback = function()
        Rayfield:Notify({
            Title = "Loading Bring Kids Menu", 
            Content = "Opening movable bring kids menu...",
            Duration = 3
        })
        
        -- Create movable bring kids menu
        local bringButtons = {
            {
                text = "Bring Lost Child",
                callback = function()
                    bringKid("Lost Child")
                end
            },
            {
                text = "Bring Lost Child 2",
                callback = function()
                    bringKid("Lost Child2")
                end
            },
            {
                text = "Bring Lost Child 3", 
                callback = function()
                    bringKid("Lost Child3")
                end
            },
            {
                text = "Bring Lost Child 4",
                callback = function()
                    bringKid("Lost Child4")
                end
            },
            {
                text = "Bring All Kids",
                callback = function()
                    bringAllKids()
                end
            }
        }
        
        createMovableGUI("BRING KIDS TO YOU", bringButtons, 200, 35)
    end
})

-- Info Section
KidsTab:CreateSection("Info")
KidsTab:CreateLabel("Click buttons to open movable menus")
KidsTab:CreateLabel("Drag the title bar to move windows")

-- Kids Functions
function teleportToKid(kidName)
    local chars = Workspace:WaitForChild("Characters")
    local char = player.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        for _, model in pairs(chars:GetChildren()) do
            if model.Name == kidName then
                local part = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
                if part then
                    char.HumanoidRootPart.CFrame = part.CFrame + Vector3.new(0, 3, 0)
                    Rayfield:Notify({
                        Title = "Teleport Successful",
                        Content = "Teleported to " .. kidName,
                        Duration = 3
                    })
                    return true
                end
            end
        end
        Rayfield:Notify({
            Title = "Teleport Failed",
            Content = kidName .. " not found",
            Duration = 3
        })
    end
    return false
end

function teleportToRandomKid()
    local chars = Workspace:WaitForChild("Characters")
    local char = player.Character
    if char and char.HumanoidRootPart then
        local allKids = {}
        local kids = {"Lost Child", "Lost Child2", "Lost Child3", "Lost Child4"}
        
        for _, kidName in pairs(kids) do
            for _, model in pairs(chars:GetChildren()) do
                if model.Name == kidName then
                    local part = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
                    if part then
                        table.insert(allKids, part)
                    end
                end
            end
        end
        
        if #allKids > 0 then
            local randomKid = allKids[math.random(1, #allKids)]
            char.HumanoidRootPart.CFrame = randomKid.CFrame + Vector3.new(0, 3, 0)
            Rayfield:Notify({
                Title = "Teleport Successful",
                Content = "Teleported to random kid",
                Duration = 3
            })
        else
            Rayfield:Notify({
                Title = "No Kids Found",
                Content = "Could not find any kids",
                Duration = 3
            })
        end
    end
end

function bringKid(kidName)
    local chars = Workspace:WaitForChild("Characters")
    local char = player.Character
    if not char then return end
    
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    local count = 0
    for _, model in pairs(chars:GetChildren()) do
        if model.Name == kidName then
            local part = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
            if part then
                local offset = Vector3.new(math.random(-5, 5), 0, math.random(-5, 5))
                if model.PrimaryPart then
                    model:SetPrimaryPartCFrame(hrp.CFrame + offset)
                else
                    part.CFrame = hrp.CFrame + offset
                end
                count = count + 1
            end
        end
    end
    
    if count > 0 then
        Rayfield:Notify({
            Title = "Bring Successful",
            Content = "Brought " .. count .. " " .. kidName .. " to you",
            Duration = 3
        })
    else
        Rayfield:Notify({
            Title = "Bring Failed", 
            Content = "No " .. kidName .. " found",
            Duration = 3
        })
    end
end

function bringAllKids()
    local kids = {"Lost Child", "Lost Child2", "Lost Child3", "Lost Child4"}
    local totalBrought = 0
    
    for _, kid in pairs(kids) do
        local chars = Workspace:WaitForChild("Characters")
        local char = player.Character
        if not char then return end
        
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        
        for _, model in pairs(chars:GetChildren()) do
            if model.Name == kid then
                local part = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
                if part then
                    local offset = Vector3.new(math.random(-8, 8), 0, math.random(-8, 8))
                    if model.PrimaryPart then
                        model:SetPrimaryPartCFrame(hrp.CFrame + offset)
                    else
                        part.CFrame = hrp.CFrame + offset
                    end
                    totalBrought = totalBrought + 1
                    wait(0.1)
                end
            end
        end
    end
    
    Rayfield:Notify({
        Title = "Bring All Complete",
        Content = "Brought " .. totalBrought .. " kids to you",
        Duration = 4
    })
end

-- FLY SYSTEM FUNCTIONS --
function activateFly()
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
        wait(1)
    end
    
    deactivateFly()
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    -- Create BodyVelocity for movement
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(40000, 40000, 40000)
    bodyVelocity.P = 1250
    bodyVelocity.Parent = humanoidRootPart
    
    -- Create BodyGyro for stability
    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(40000, 40000, 40000)
    bodyGyro.P = 3000
    bodyGyro.D = 200
    bodyGyro.CFrame = humanoidRootPart.CFrame
    bodyGyro.Parent = humanoidRootPart
    
    -- Fly control loop
    if not UserInputService.TouchEnabled then
        flyConnection = RunService.Heartbeat:Connect(function()
            if not flyEnabled or not character or not humanoidRootPart.Parent then
                deactivateFly()
                return
            end
            
            local moveDirection = Vector3.new(0, 0, 0)
            
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDirection = moveDirection + humanoidRootPart.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDirection = moveDirection - humanoidRootPart.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDirection = moveDirection - humanoidRootPart.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDirection = moveDirection + humanoidRootPart.CFrame.RightVector
            end
            
            local verticalSpeed = 0
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                verticalSpeed = verticalSpeed + 1
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                verticalSpeed = verticalSpeed - 1
            end
            
            if moveDirection.Magnitude > 0 then
                moveDirection = moveDirection.Unit * flySpeed
            end
            
            bodyVelocity.Velocity = Vector3.new(
                moveDirection.X,
                verticalSpeed * flySpeed,
                moveDirection.Z
            )
            
            bodyGyro.CFrame = humanoidRootPart.CFrame
        end)
    else
        mobileFlyConnection = RunService.Heartbeat:Connect(function()
            if not flyEnabled or not character or not humanoidRootPart.Parent then
                return
            end
            
            local moveDirection = Vector3.new(0, 0, 0)
            
            if forwardPressed then moveDirection = moveDirection + humanoidRootPart.CFrame.LookVector end
            if backwardPressed then moveDirection = moveDirection - humanoidRootPart.CFrame.LookVector end
            if leftPressed then moveDirection = moveDirection - humanoidRootPart.CFrame.RightVector end
            if rightPressed then moveDirection = moveDirection + humanoidRootPart.CFrame.RightVector end
            
            local verticalSpeed = 0
            if upPressed then verticalSpeed = verticalSpeed + 1 end
            if downPressed then verticalSpeed = verticalSpeed - 1 end
            
            if moveDirection.Magnitude > 0 then
                moveDirection = moveDirection.Unit * flySpeed
            end
            
            bodyVelocity.Velocity = Vector3.new(
                moveDirection.X,
                verticalSpeed * flySpeed,
                moveDirection.Z
            )
            
            bodyGyro.CFrame = humanoidRootPart.CFrame
        end)
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.PlatformStand = true
    end
end

function deactivateFly()
    upPressed = false
    downPressed = false
    forwardPressed = false
    backwardPressed = false
    leftPressed = false
    rightPressed = false
    
    if flyConnection then 
        flyConnection:Disconnect() 
        flyConnection = nil 
    end
    if mobileFlyConnection then 
        mobileFlyConnection:Disconnect() 
        mobileFlyConnection = nil 
    end
    
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            if bodyVelocity then bodyVelocity:Destroy() end
            if bodyGyro then bodyGyro:Destroy() end
        end
        
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
    end
end

-- MOBILE CONTROLS --
function createMobileControls()
    removeMobileControls()
    
    local playerGui = player:WaitForChild("PlayerGui")
    
    mobileControls = Instance.new("ScreenGui")
    mobileControls.Name = "MobileFlyControls"
    mobileControls.ResetOnSpawn = false
    mobileControls.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Up Button
    local upButton = createMobileButton("‚Üë", UDim2.new(1, -120, 0.3, 0), Color3.fromRGB(0, 200, 0))
    upButton.MouseButton1Down:Connect(function() upPressed = true end)
    upButton.MouseButton1Up:Connect(function() upPressed = false end)
    
    -- Down Button
    local downButton = createMobileButton("‚Üì", UDim2.new(1, -120, 0.3, 70), Color3.fromRGB(200, 0, 0))
    downButton.MouseButton1Down:Connect(function() downPressed = true end)
    downButton.MouseButton1Up:Connect(function() downPressed = false end)
    
    -- Movement Buttons
    local forwardButton = createMobileButton("W", UDim2.new(0, 120, 0.6, -60), Color3.fromRGB(100, 100, 255))
    forwardButton.MouseButton1Down:Connect(function() forwardPressed = true end)
    forwardButton.MouseButton1Up:Connect(function() forwardPressed = false end)
    
    local backwardButton = createMobileButton("S", UDim2.new(0, 120, 0.6, 60), Color3.fromRGB(100, 100, 255))
    backwardButton.MouseButton1Down:Connect(function() backwardPressed = true end)
    backwardButton.MouseButton1Up:Connect(function() backwardPressed = false end)
    
    local leftButton = createMobileButton("A", UDim2.new(0, 60, 0.6, 0), Color3.fromRGB(100, 100, 255))
    leftButton.MouseButton1Down:Connect(function() leftPressed = true end)
    leftButton.MouseButton1Up:Connect(function() leftPressed = false end)
    
    local rightButton = createMobileButton("D", UDim2.new(0, 180, 0.6, 0), Color3.fromRGB(100, 100, 255))
    rightButton.MouseButton1Down:Connect(function() rightPressed = true end)
    rightButton.MouseButton1Up:Connect(function() rightPressed = false end)
    
    mobileControls.Parent = playerGui
end

function createMobileButton(text, position, color)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 60, 0, 60)
    button.Position = position
    button.BackgroundColor3 = color
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 18
    button.Font = Enum.Font.SourceSansBold
    button.ZIndex = 10
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = button
    
    button.Parent = mobileControls
    return button
end

function removeMobileControls()
    if mobileControls then
        mobileControls:Destroy()
        mobileControls = nil
    end
end

-- TELEPORT FUNCTIONS --
function teleportToSpawn()
    Rayfield:Notify({
        Title = "Teleporting to Spawn",
        Content = "Looking for spawn location...",
        Duration = 3
    })
    
    local found = false
    
    -- Search for spawn locations
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("SpawnLocation") then
            safeTeleport(obj.Position)
            Rayfield:Notify({
                Title = "Teleport Successful",
                Content = "Teleported to spawn base",
                Duration = 4
            })
            found = true
            break
        end
    end
    
    if not found then
        -- Search for base camp objects
        local baseObjects = {"Campfire", "MainFire", "Base", "Spawn"}
        for _, objName in pairs(baseObjects) do
            local obj = Workspace:FindFirstChild(objName)
            if obj then
                safeTeleport(getObjectPosition(obj))
                Rayfield:Notify({
                    Title = "Teleport Successful",
                    Content = "Teleported to " .. objName,
                    Duration = 4
                })
                found = true
                break
            end
        end
    end
    
    if not found then
        -- Default position
        safeTeleport(Vector3.new(0, 25, 0))
        Rayfield:Notify({
            Title = "Teleport Complete",
            Content = "Teleported to default spawn position",
            Duration = 4
        })
    end
end

function teleportToVolcano()
    Rayfield:Notify({
        Title = "Teleporting to Volcano",
        Content = "Searching for volcano...",
        Duration = 3
    })
    
    local found = false
    
    -- Search for volcano objects
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Part") or obj:IsA("Model") then
            if string.find(string.lower(obj.Name), "volcano") then
                safeTeleport(getObjectPosition(obj))
                Rayfield:Notify({
                    Title = "Teleport Successful",
                    Content = "Teleported to Volcano",
                    Duration = 4
                })
                found = true
                break
            end
        end
    end
    
    if not found then
        -- Search for lava/magma as alternative
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Part") then
                if string.find(string.lower(obj.Name), "lava") or string.find(string.lower(obj.Name), "magma") then
                    safeTeleport(getObjectPosition(obj))
                    Rayfield:Notify({
                        Title = "Teleport Successful",
                        Content = "Teleported to volcanic area",
                        Duration = 4
                    })
                    found = true
                    break
                end
            end
        end
    end
    
    if not found then
        Rayfield:Notify({
            Title = "Volcano Not Found",
            Content = "Could not find volcano biome",
            Duration = 4
        })
    end
end

function safeTeleport(position)
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    -- Teleport to position with safe height
    humanoidRootPart.CFrame = CFrame.new(position.X, position.Y + 5, position.Z)
end

function getObjectPosition(obj)
    if obj:IsA("Model") then
        local primaryPart = obj.PrimaryPart or obj:FindFirstChildWhichIsA("BasePart")
        if primaryPart then
            return primaryPart.Position
        end
    elseif obj:IsA("Part") then
        return obj.Position
    end
    return Vector3.new(0, 0, 0)
end

-- ITEM COLLECTION FUNCTIONS --
function bringLogsOnly()
    StatusLabel:Set("Collecting Logs...")
    
    local itemsCollected = 0
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("Part") or item:IsA("MeshPart") or item:IsA("Model") then
            -- Sucht nach allen Log-Varianten
            local itemName = string.lower(item.Name)
            if itemName == "log" or itemName == "logs" then
                pcall(function()
                    if item:IsA("Model") then
                        local primaryPart = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                        if primaryPart then
                            item:SetPrimaryPartCFrame(CFrame.new(humanoidRootPart.Position + Vector3.new(0, 3, 0)))
                        end
                    else
                        item.CFrame = CFrame.new(humanoidRootPart.Position + Vector3.new(0, 3, 0))
                    end
                    itemsCollected = itemsCollected + 1
                end)
                wait(0.05)
            end
        end
    end
    
    StatusLabel:Set("Collected " .. itemsCollected .. " Logs")
    Rayfield:Notify({
        Title = "Log Collection Complete",
        Content = "Collected " .. itemsCollected .. " Logs",
        Duration = 4
    })
end

function bringFuel()
    StatusLabel:Set("Collecting Fuel...")
    
    local coalCollected = 0
    local oilCollected = 0
    local fuelCollected = 0
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("Part") or item:IsA("MeshPart") or item:IsA("Model") then
            local itemName = item.Name
            
            if itemName == "Coal" then
                moveItemToPlayer(item)
                coalCollected = coalCollected + 1
                wait(0.05)
            elseif itemName == "Oil Canister" then
                moveItemToPlayer(item)
                oilCollected = oilCollected + 1
                wait(0.05)
            elseif itemName == "Fuel Canister" then
                moveItemToPlayer(item)
                fuelCollected = fuelCollected + 1
                wait(0.05)
            end
        end
    end
    
    StatusLabel:Set("Fuel: " .. coalCollected .. " Coal, " .. oilCollected .. " Oil, " .. fuelCollected .. " Fuel")
    Rayfield:Notify({
        Title = "Fuel Collection Complete",
        Content = "Coal: " .. coalCollected .. " | Oil: " .. oilCollected .. " | Fuel: " .. fuelCollected,
        Duration = 5
    })
end

function bringFood()
    StatusLabel:Set("Collecting Food...")
    
    local carrotCollected = 0
    local berryCollected = 0
    local morselCollected = 0
    local steakCollected = 0
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("Part") or item:IsA("MeshPart") or item:IsA("Model") then
            local itemName = item.Name
            
            if itemName == "Carrot" then
                moveItemToPlayer(item)
                carrotCollected = carrotCollected + 1
                wait(0.05)
            elseif itemName == "Berry" then
                moveItemToPlayer(item)
                berryCollected = berryCollected + 1
                wait(0.05)
            elseif itemName == "Morsel" then
                moveItemToPlayer(item)
                morselCollected = morselCollected + 1
                wait(0.05)
            elseif itemName == "Steak" then
                moveItemToPlayer(item)
                steakCollected = steakCollected + 1
                wait(0.05)
            end
        end
    end
    
    StatusLabel:Set("Food: " .. carrotCollected .. " Carrots, " .. berryCollected .. " Berries, " .. morselCollected .. " Morsels, " .. steakCollected .. " Steaks")
    Rayfield:Notify({
        Title = "Food Collection Complete",
        Content = "Carrots: " .. carrotCollected .. " | Berries: " .. berryCollected .. " | Morsels: " .. morselCollected .. " | Steaks: " .. steakCollected,
        Duration = 6
    })
end

function bringMeds()
    StatusLabel:Set("Collecting Meds...")
    
    local bandagesCollected = 0
    local medkitsCollected = 0
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("Part") or item:IsA("MeshPart") or item:IsA("Model") then
            local itemName = item.Name
            
            if itemName == "Bandage" then
                moveItemToPlayer(item)
                bandagesCollected = bandagesCollected + 1
                wait(0.05)
            elseif itemName == "Medkit" then
                moveItemToPlayer(item)
                medkitsCollected = medkitsCollected + 1
                wait(0.05)
            end
        end
    end
    
    StatusLabel:Set("Meds: " .. bandagesCollected .. " Bandages, " .. medkitsCollected .. " Medkits")
    Rayfield:Notify({
        Title = "Medical Collection Complete",
        Content = "Bandages: " .. bandagesCollected .. " | Medkits: " .. medkitsCollected,
        Duration = 5
    })
end

function bringScrap()
    StatusLabel:Set("Collecting Scrap...")
    
    local tyreCollected = 0
    local washingMachineCollected = 0
    local microwaveCollected = 0
    local carEngineCollected = 0
    local radioCollected = 0
    local sheetMetalCollected = 0
    local boltCollected = 0
    local fanCollected = 0
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    for _, item in pairs(Workspace:GetDescendants()) do
        if item:IsA("Part") or item:IsA("MeshPart") or item:IsA("Model") then
            local itemName = item.Name
            
            if itemName == "Tyre" or itemName == "Tire" then
                moveItemToPlayer(item)
                tyreCollected = tyreCollected + 1
                wait(0.05)
            elseif itemName == "Washing Machine" then
                moveItemToPlayer(item)
                washingMachineCollected = washingMachineCollected + 1
                wait(0.05)
            elseif itemName == "Broken Microwave" then
                moveItemToPlayer(item)
                microwaveCollected = microwaveCollected + 1
                wait(0.05)
            elseif itemName == "Old Car Engine" then
                moveItemToPlayer(item)
                carEngineCollected = carEngineCollected + 1
                wait(0.05)
            elseif itemName == "Old Radio" then
                moveItemToPlayer(item)
                radioCollected = radioCollected + 1
                wait(0.05)
            elseif itemName == "Sheet Metal" then
                moveItemToPlayer(item)
                sheetMetalCollected = sheetMetalCollected + 1
                wait(0.05)
            elseif itemName == "Bolt" then
                moveItemToPlayer(item)
                boltCollected = boltCollected + 1
                wait(0.05)
            elseif itemName == "Broken Fan" then
                moveItemToPlayer(item)
                fanCollected = fanCollected + 1
                wait(0.05)
            end
        end
    end
    
    StatusLabel:Set("Scrap: " .. tyreCollected .. " Tyres, " .. washingMachineCollected .. " Washers, " .. microwaveCollected .. " Microwaves")
    Rayfield:Notify({
        Title = "Scrap Collection Complete",
        Content = "Tyres: " .. tyreCollected .. " | Washers: " .. washingMachineCollected .. " | Microwaves: " .. microwaveCollected .. " | Engines: " .. carEngineCollected .. " | Radios: " .. radioCollected,
        Duration = 8
    })
end

function moveItemToPlayer(item)
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    pcall(function()
        if item:IsA("Model") then
            local primaryPart = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
            if primaryPart then
                item:SetPrimaryPartCFrame(CFrame.new(humanoidRootPart.Position + Vector3.new(0, 3, 0)))
            end
        else
            item.CFrame = CFrame.new(humanoidRootPart.Position + Vector3.new(0, 3, 0))
        end
    end)
end

-- Character Added Handler
player.CharacterAdded:Connect(function(character)
    wait(1)
    
    -- Reapply modifications
    if speedEnabled then
        character.Humanoid.WalkSpeed = playerSpeed
    end
    if flyEnabled then
        activateFly()
        if UserInputService.TouchEnabled then
            createMobileControls()
        end
    end
end)

-- Initial setup
if player.Character then
    player.Character.Humanoid.JumpPower = 50
end

-- Success notification
Rayfield:Notify({
    Title = "99 Nights Tools Loaded",
    Content = "Complete Version Ready with Movable Kids GUI!",
    Duration = 5
})

-- Load the interface
Rayfield:LoadConfiguration()
